Q1:

Using Little's Law, we can compute the required parallelism by multiplying the latency (800 cycles / 2175 MHz = 3.678e-7 sec) by the throughput (360 GB/s), which gives 142,172 bytes in-flight. 

Q2:

There's 100KB of shared memory available per SM in our GPU. When each thread lobkc requests 1000 bytes of shared memory (~1KB), we can fit 100 coresident blocks assuming no other resource like registers is limiting. If each block is running 64 threads (2 warps), then we can fit a maximum of 24 blocks at a time on an SM and we will reach 100% occupancy. 

With each block requesting 10,000 bytes (~10KB), we can fit 10 thread blocks at a time due to shared memory limitations. If each uses 2 warps, the SM will have 20 warps on it (42% occupancy).

If each thread block requests 30,000 bytes (~30 KB) we can fit 3 thread blocks at a time due to shared memory limitations. If each uses 2 warps, the SM will have 6 warps on it, reaching only 12.5% occupancy. 

Q3:

Each thread block has 64 threads (2 warps). To achieve 20% occupancy, we need to make sure only 10 warps are active at a time. This means we should have 5 active thread blocks. This means each one should request 20KB of shared memory. However, since the shared memory limit is slightly under 100,000 bytes I had to make each request 19,000 bytes to get 5 blocks/SM. 

To get 50% occupancy, I requested 7000 bytes of shared memory per block. 

To get 80% occupancy, I requested 4000 bytes of shared memory per block. 

Q4: 

